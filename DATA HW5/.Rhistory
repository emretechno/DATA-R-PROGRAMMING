my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data
my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data %>%
DT::datatable()
my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data tidyrverse:: %>%
my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data |>
head(10) |>
DT::datatable()
my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data |>
DT::datatable(options = list(
autoWidth = TRUE,
pageLength = 3
))
my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data |>
DT::datatable(options = list(
autoWidth = TRUE,
pageLength = 3
))
my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data |>
DT::datatable(options = list(
autoWidth = TRUE,
pageLength = 3
))
my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data
my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=",",header=TRUE)
my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data |>
head(6) |>
kable()
my_data <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data |>
head(6) |>
knitr::kable()
my_data_dataset <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data_abbr <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep =";",header = TRUE)
my_data_dataset |>
datatable(caption="DATASET.CSV FILE ", options =  list(
pageLength = 6 ,
autoWidth= TRUE
))
library(DT)
my_data_dataset <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data_abbr <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep =";",header = TRUE)
my_data_dataset |>
DT::datatable(caption="DATASET.CSV FILE ", options =  list(
pageLength = 6 ,
autoWidth= TRUE
))
my_data_abbr |>
head(6) |>
as_tibble()
library(DT)
my_data_dataset <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep=";",header=TRUE)
my_data_abbr <- read.csv("/Users/y.emrekilicer/Desktop/DATA KONU PROJE ODEV/DATA HW5/dataset.csv",sep =";",header = TRUE)
my_data_dataset |>
DT::datatable(caption="DATASET.CSV FILE ", options =  list(
pageLength = 6 ,
autoWidth= TRUE
))
my_data_abbr |>
ncol()
my_data_dataset %>%
group_by(Gender,Race) %>%
summarise(count = n())
library(knitr) #kable function
library(DT)
library(dplyr)
library(ggplot2)
install.packages("janeaustenr")
books <-austen_books()
books <-austen_books()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(janeaustenr)
books <-austen_books()
nrow(books)
library(janeaustenr)
# Get the number of rows in the dataset
books <-austen_books()
nrow(books)
# Clean and standardize column names to lowercase and remove special characters for consistency
my_data <- clean_names(my_data)
books <-austen_books()
library(knitr) #kable function
library(DT)
library(dplyr)
library(ggplot2)
library(janeaustenr)
library(tibble)
library(stringr)
library(purrr)
install.packages("tidytext")
library(knitr) #kable function
library(DT)
library(dplyr)
library(ggplot2)
library(janeaustenr)
library(tibble)
library(stringr)
library(purrr)
library(tidytext)
install.packages("extrafont")
library(knitr) #kable function
library(DT)
library(dplyr)
library(ggplot2)
library(janeaustenr)
library(tibble)
library(stringr)
library(purrr)
library(tidytext)
install.packages("patchwork
")
library(knitr) #kable function
library(DT)
library(dplyr)
library(ggplot2)
library(janeaustenr)
library(tibble)
library(stringr)
library(purrr)
library(tidytext)
install.packages("patchwork")
library(knitr) #kable function
library(DT)
library(dplyr)
library(ggplot2)
library(janeaustenr)
library(tibble)
library(stringr)
library(purrr)
library(tidytext)
install.packages("gganimate")
library(knitr) #kable function
library(DT)
library(dplyr)
library(ggplot2)
library(janeaustenr)
library(tibble)
library(stringr)
library(purrr)
library(tidytext)
install.packages("ggplot2")
install.packages("ggplot2")
library(knitr) #kable function
library(DT)
library(dplyr)
library(ggplot2)
library(janeaustenr)
library(tibble)
library(stringr)
library(purrr)
library(tidytext)
install.packages("ggplot2")
install.packages("ggplot2")
# Analyze and visualize the most common ages, weights, genders
#and heights in the dataset.
total_of_group <- function(data, group_of, top_n) {
result_table <- data %>%
group_by({{ group_of }}) %>%
summarize(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(top_n, wt = Count)
# Calculate peak values
peak_values <- result_table %>%
mutate(ranking = row_number())
ggplot(result_table, aes(x = reorder({{ group_of }}, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "yellow", color = "black") +
geom_text(aes(label = Count), vjust = -0.5, size = 3) +
geom_line(data = peak_values, aes(group = 1, x = reorder({{ group_of }}, -Count), y = Count), color = "red") +
labs(title = paste("Most Common", deparse(substitute(group_of))), x = deparse(substitute(group_of)), y = "Count")+
theme(axis.text.x =element_text(color = "brown"),
axis.text.y= element_text(color = "purple"),
axis.title.x = element_text(face = "bold.italic"),
axis.title.y = element_text(face = "bold.italic")  )
}
# Let's visualize the ages and also weights.
total_of_group(my_data, age, 12)
# Density plot for distribution of obesity levels
ggplot(my_data, aes(x = n_obeyesdad, fill = n_obeyesdad))+
geom_density(alpha = 1) +  # Density plot
labs(title = "Distribution of Obesity Levels", x = "Obesity Level", y = "Density") +
theme(axis.text.x = element_text(angle = 45, hjust = 1 , face = "bold.italic"))
rs <- my_data %>%
group_by(calc,smoke,n_obeyesdad) %>%
summarize(count = n())
#Before start the analyse , I should make the values of mutate integer , otherwise there are plenty of float numbers.
my_data <- my_data %>%
mutate(tue = case_when(
tue < 0.5 ~ 0,
tue < 1.5 ~ 1,
tue < 2.5 ~ 2,
.default = 3
))
# Calculate descriptive statistics only for numeric columns in the dataframe my_data
additional_manipulate <- my_data %>%
# Apply summary functions across all numeric columns
summarise(across(
where(is.numeric),  # Apply the functions only to numeric columns
list(
count = ~length(.),  # Count total values
mean = ~mean(.),  # Calculate mean
std = ~sd(.),  # Calculate standard deviation
min = ~min(.),  # Find minimum value
`50%` = ~median(.),  # Median
max = ~max(.)  # Find maximum value
)
)) %>%
# Keep data in a long format for clarity
pivot_longer(
cols = everything(),
names_to = c("Column", ".value"),
names_pattern = "(.*)_(.*)"
)
rs <- my_data %>%
group_by(calc,smoke,n_obeyesdad) %>%
summarize(count = n())
#Visualization
library(ggplot2)
library(gganimate)
# Visualization
ggplot(obesity_summary, aes(
x = mean_age,
y = mean_BMI,
fill = n_obeyesdad)) +
transition_reveal(along = mean_age) +
geom_col(width = 0.5) +
geom_text(aes(label = round(mean_age, 2)), vjust = -0.5, position = position_stack(vjust = 1.05)) +
ylab("Mean of age ") +
ggtitle("Mean BMI by Obesity Level") +
labs(title = "mean of AGE over bmi with Animation",
x="Mean of Age",
y="Mean of BMI ") +
scale_x_continuous(breaks = seq(0, max(obesity_summary$mean_age), by = 1)) +
scale_y_continuous(breaks = seq(0, max(obesity_summary$mean_BMI), by = 5)) +
theme(axis.text.x=element_text(angle=45,hjust=1),
plot.title = element_text(family = "Times New Roman" , colour = "blue",face = "bold.italic"))
